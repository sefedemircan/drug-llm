// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import { NextResponse } from 'next/server';
import { OpenAI } from "openai";
import { createClient } from '@supabase/supabase-js';

// OpenAI istemcisini olu≈ütur
const client = new OpenAI({
	baseURL: "https://router.huggingface.co/nebius/v1",
	apiKey: process.env.HF_TOKEN || "",
});

// Supabase istemcisini olu≈ütur
const supabase = createClient(
	process.env.NEXT_PUBLIC_SUPABASE_URL,
	process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// Ya≈ü hesaplama fonksiyonu
function calculateAge(birthDate) {
	if (!birthDate) return null;
	const today = new Date();
	const birth = new Date(birthDate);
	let age = today.getFullYear() - birth.getFullYear();
	const monthDiff = today.getMonth() - birth.getMonth();
	if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
		age--;
	}
	return age;
}

// Kullanƒ±cƒ± profil bilgilerini Supabase'den √ßek
async function getUserProfile(userId) {
	try {
		console.log('üìã getUserProfile √ßaƒürƒ±ldƒ±, userId:', userId);
		
		const { data, error } = await supabase
			.from('user_profile')
			.select('*')
			.eq('user_id', userId)
			.single();

		if (error) {
			console.error('‚ùå Error fetching user profile:', error);
			console.error('‚ùå Error details:', error.message);
			console.error('‚ùå Error code:', error.code);
			return null;
		}

		console.log('‚úÖ Profile data query successful');
		console.log('‚úÖ Profile data found:', !!data);
		return data;
	} catch (error) {
		console.error('‚ùå Exception in getUserProfile:', error);
		return null;
	}
}

// Kullanƒ±cƒ± saƒülƒ±k bilgilerini Supabase'den √ßek
async function getHealthInfo(userId) {
	try {
		console.log('üè• getHealthInfo √ßaƒürƒ±ldƒ±, userId:', userId);
		
		const { data, error } = await supabase
			.from('health_info')
			.select('*')
			.eq('user_id', userId)
			.single();

		if (error) {
			console.error('‚ùå Error fetching health info:', error);
			console.error('‚ùå Error details:', error.message);
			console.error('‚ùå Error code:', error.code);
			return null;
		}

		console.log('‚úÖ Health data query successful');
		console.log('‚úÖ Health data found:', !!data);
		return data;
	} catch (error) {
		console.error('‚ùå Exception in getHealthInfo:', error);
		return null;
	}
}

// System prompt olu≈üturma fonksiyonu
function createSystemPrompt(profileData = null, healthData = null) {
	const hasUserData = profileData || healthData;
	
	return `Senin adƒ±n DrugLLM, T√ºrkiye'deki ila√ß mevzuatƒ±na uygun, bilimsel ve g√ºvenilir bilgiler veriyorsun.

${hasUserData ? 'üîπ BU KULLANICININ Kƒ∞≈ûƒ∞SEL Bƒ∞LGƒ∞LERƒ∞ MEVCUT - MUTLAKA Dƒ∞KKATE AL!' : 'üî∏ Bu kullanƒ±cƒ±nƒ±n ki≈üisel bilgileri mevcut deƒüil - genel bilgi ver.'}

Kƒ∞≈ûƒ∞Lƒ∞ƒûƒ∞N VE YAKLA≈ûIMIN:
- Empatik, sabƒ±rlƒ± ve anlayƒ±≈ülƒ±
- Bilimsel verilere dayalƒ± objektif yakla≈üƒ±m
- Kullanƒ±cƒ±nƒ±n endi≈üelerini ciddiye alan
- Kompleks tƒ±bbi konularƒ± anla≈üƒ±lƒ±r ≈üekilde a√ßƒ±klayan
- Ki≈üisel bilgilere sahip olduƒüunda bunlarƒ± uygun ≈üekilde kullanarak ki≈üiselle≈ütirilmi≈ü yanƒ±tlar veren
- Doƒüal ve akƒ±cƒ± konu≈üma tarzƒ±

YANITLAMA PRƒ∞NSƒ∞PLERƒ∞:
1. **G√ºvenlik √ñncelikli**: Her zaman g√ºvenliƒüi √∂n planda tut
2. **Kanƒ±ta Dayalƒ±**: Sadece bilimsel verilerle desteklenen bilgileri payla≈ü
3. **Ki≈üiselle≈ütirilmi≈ü**: Kullanƒ±cƒ±nƒ±n profil bilgilerini dikkate al
4. **Doƒüal ƒ∞leti≈üim**: Formal ba≈ülƒ±klar kullanmak zorunda deƒüilsin, konu≈üma tarzƒ±nda yanƒ±t ver
5. **Uyarƒ± Odaklƒ±**: Kritik durumlarƒ± a√ßƒ±k√ßa belirt ama doƒüal bir ≈üekilde
6. **Ki≈üisel Bilgi Entegrasyonu**: Kullanƒ±cƒ± hakkƒ±nda sorular sorduƒüunda mevcut bilgileri kullan

## Kƒ∞≈ûƒ∞SEL SORULARA YANITLAMA:
Kullanƒ±cƒ± kendisi hakkƒ±nda sorular sorduƒüunda (ya≈üƒ±m ka√ß, kilom ne, hangi ila√ßlarƒ± kullanƒ±yorum vb.):
- Mevcut profil ve saƒülƒ±k bilgilerini kullan
- Bilgi eksikse nazik√ße belirt
- G√ºvenlik ve mahremiyet i√ßin hassas verileri koruyarak yanƒ±t ver
- Gerekiyorsa bilgilerin g√ºncellenmesini √∂ner

## YANITLAMA TARZI:
- Samimi ve sƒ±cak bir √ºslup kullan
- Ki≈üisel bilgileri doƒüal bir ≈üekilde konu≈ümaya entegre et
- ƒ∞la√ß sorularƒ±nda gerekli detaylarƒ± ver ama katƒ± ba≈ülƒ±klar kullanma
- Uyarƒ±larƒ± doƒüal c√ºmle yapƒ±sƒ± i√ßinde belirt
- Kullanƒ±cƒ±nƒ±n durumuna √∂zel √∂neriler ver
- Emojileri √∂l√ß√ºl√º kullan, abartma

KULLANICI PROFIL Bƒ∞LGƒ∞LERƒ∞:
${profileData ? `- ƒ∞sim: ${profileData.full_name || 'Belirtilmemi≈ü'}
- Ya≈ü: ${calculateAge(profileData.birth_date) || 'Belirtilmemi≈ü'}
- Cinsiyet: ${profileData.gender || 'Belirtilmemi≈ü'}  
- Kilo: ${profileData.weight || 'Belirtilmemi≈ü'} kg
- Boy: ${profileData.height || 'Belirtilmemi≈ü'} cm
- E-posta: ${profileData.email || 'Belirtilmemi≈ü'}
- Telefon: ${profileData.phone || 'Belirtilmemi≈ü'}` : '- Profil bilgisi mevcut deƒüil'}

${healthData ? `SAƒûLIK Bƒ∞LGƒ∞LERƒ∞:
- Kan Grubu: ${healthData.blood_type || 'Belirtilmemi≈ü'}
- Kronik Hastalƒ±klar: ${healthData.chronic_diseases?.join(', ') || 'Yok'}
- Mevcut ƒ∞la√ßlar: ${healthData.current_medications?.join(', ') || 'Yok'}
- ƒ∞la√ß Alerjileri: ${healthData.drug_allergies?.join(', ') || 'Yok'}
- Gƒ±da Alerjileri: ${healthData.food_allergies?.join(', ') || 'Yok'}
- Tƒ±bbi Ge√ßmi≈ü: ${healthData.medical_history || 'Belirtilmemi≈ü'}
- Aile Ge√ßmi≈üi: ${healthData.family_history || 'Belirtilmemi≈ü'}
- Ya≈üam Tarzƒ±: ${healthData.lifestyle_info || 'Belirtilmemi≈ü'}` : '- Saƒülƒ±k bilgisi mevcut deƒüil'}

√ñZEL TALƒ∞MATLAR:
- Kullanƒ±cƒ± kendi bilgilerini sorduƒüunda yukarƒ±daki verileri doƒüal bir ≈üekilde kullan
- Eƒüer kullanƒ±cƒ±nƒ±n alerjisi varsa, uyarƒ±larƒ± konu≈üma i√ßinde doƒüal olarak belirt
- Kronik hastalƒ±klarƒ± olan kullanƒ±cƒ±lar i√ßin √∂zel dikkat g√∂ster
- Ya≈ülƒ± kullanƒ±cƒ±lar (65+) i√ßin dozaj ayarlamasƒ± gerektiƒüini belirt
- Hamilelik/emzirme durumunda ekstra dikkatli ol
- Acil durumlarƒ± tanƒ± ve hemen doktora y√∂nlendir
- Ki≈üisel bilgi sorularƒ±nda mevcut verileri doƒürudan payla≈ü
- Bilgi eksikse "Bu bilgi profil verinizde mevcut deƒüil" ≈üeklinde belirt
- Yanƒ±tlarƒ±nda doƒüal bir konu≈üma akƒ±≈üƒ± kullan, formal ba≈ülƒ±klar kullanma

YASAKLAR:
- Kesin tanƒ± koyma
- Re√ßete yazma
- Doktor yerine ge√ßme
- Kanƒ±tlanmamƒ±≈ü bilgi verme
- Alternatif tƒ±p √∂nerileri
- Ki≈üisel verileri g√ºvenlik dƒ±≈üƒ± payla≈üma
- Katƒ± format ba≈ülƒ±klarƒ± kullanma (üîç ANA Bƒ∞LGƒ∞, ‚ö†Ô∏è √ñNEMLƒ∞ UYARILAR gibi)
- Robot gibi yanƒ±t verme

√ñRNEK YANITLAMA TARZI:
‚ùå K√∂t√º: "üîç ANA Bƒ∞LGƒ∞: Aspirin aƒürƒ± kesicidir. ‚ö†Ô∏è √ñNEMLƒ∞ UYARILAR: Yan etkiler..."
‚úÖ ƒ∞yi: "Aspirin ger√ßekten etkili bir aƒürƒ± kesici. Sizin ya≈üƒ±nƒ±zda genelde g√ºnde 500mg g√ºvenli, ama mevcut ila√ßlarƒ±nƒ±zla etkile≈üim olabilir mi kontrol edelim..."

√ñNEMLƒ∞: Eƒüer kullanƒ±cƒ±nƒ±n profil ve saƒülƒ±k bilgileri mevcutsa, yanƒ±tƒ±nda mutlaka bu bilgileri dikkate al ve gerekli uyarƒ±larƒ± doƒüal bir ≈üekilde yap. √ñzellikle ila√ß alerjileri ve kronik hastalƒ±klar i√ßin √∂zel dikkat g√∂ster. Kullanƒ±cƒ± kendisi hakkƒ±nda sorular sorduƒüunda mevcut bilgileri kullanarak samimi ve doƒüal bir yanƒ±t ver.

≈ûimdi kullanƒ±cƒ±nƒ±n sorusunu bu rehbere g√∂re yanƒ±tla:`;
}

// Llama 3.1 modeli ile chat tamamlama isteƒüi g√∂nderen fonksiyon
async function generateChatResponse(userMessage, profileData = null, healthData = null) {
	// API anahtarƒ± kontrol√º
	if (!process.env.HF_TOKEN) {
		throw new Error("HF_TOKEN environment variable is not set");
	}
	
	try {
		console.log('Sending request to Llama 3.1 model...');
		
		const chatCompletion = await client.chat.completions.create({
			model: "meta-llama/Meta-Llama-3.1-8B-Instruct-fast",
			messages: [
				{
					role: "system",
					content: createSystemPrompt(profileData, healthData)
				},
				{
					role: "user",
					content: userMessage,
				},
			],
			temperature: 0.7,
			max_tokens: 1000,
		});
		
		console.log('Response received from Llama 3.1');
		return chatCompletion.choices[0].message.content;
	} catch (error) {
		console.error('Error generating chat response:', error);
		throw error;
	}
}

// Hata durumunda kullanƒ±lacak basit yanƒ±t
function getErrorResponse(message) {
	return `√úzg√ºn√ºm, ≈üu anda yanƒ±t veremiyorum. L√ºtfen daha sonra tekrar deneyin. (Hata: ${message})`;
}

export async function POST(request) {
	try {
		const body = await request.json();
		const userMessage = body.message || 'Merhaba';
		const userId = body.userId || null;
		const frontendProfileData = body.profileData || null;
		const frontendHealthData = body.healthData || null;

		console.log('=== API DEBUG ===');
		console.log('Received message:', userMessage);
		console.log('Received userId:', userId);
		console.log('UserId type:', typeof userId);
		console.log('Frontend profile data:', frontendProfileData);
		console.log('Frontend health data:', frontendHealthData);

		// Kullanƒ±cƒ± verilerini Supabase'den √ßek
		let supabaseProfileData = null;
		let supabaseHealthData = null;

		if (userId) {
			console.log('‚úÖ UserID mevcut, kullanƒ±cƒ± verilerini √ßekiyorum...');
			console.log('Fetching user data for userId:', userId);
			
			// Paralel olarak profil ve saƒülƒ±k bilgilerini √ßek
			const [userProfile, userHealthInfo] = await Promise.all([
				getUserProfile(userId),
				getHealthInfo(userId)
			]);

			supabaseProfileData = userProfile;
			supabaseHealthData = userHealthInfo;

			console.log('Supabase Profile data fetched:', supabaseProfileData ? 'Yes' : 'No');
			console.log('Supabase Health data fetched:', supabaseHealthData ? 'Yes' : 'No');
			
			// Debug: √áekilen verileri logla
			if (supabaseProfileData) {
				console.log('‚úÖ Supabase Profile data:', JSON.stringify(supabaseProfileData, null, 2));
			} else {
				console.log('‚ùå Supabase Profile data is null/undefined');
			}
			if (supabaseHealthData) {
				console.log('‚úÖ Supabase Health data:', JSON.stringify(supabaseHealthData, null, 2));
			} else {
				console.log('‚ùå Supabase Health data is null/undefined');
			}
		} else {
			console.log('‚ùå UserID yok, genel prompt kullanƒ±lacak');
			console.log('No userId provided, using default prompt');
		}

		// Supabase verisi varsa onu kullan, yoksa frontend'den gelen veriyi kullan
		const finalProfileData = supabaseProfileData || frontendProfileData;
		const finalHealthData = supabaseHealthData || frontendHealthData;

		console.log('üéØ Final profile data source:', supabaseProfileData ? 'Supabase' : (frontendProfileData ? 'Frontend' : 'None'));
		console.log('üéØ Final health data source:', supabaseHealthData ? 'Supabase' : (frontendHealthData ? 'Frontend' : 'None'));

		try {
			// Debug: System prompt'u logla
			const systemPrompt = createSystemPrompt(finalProfileData, finalHealthData);
			console.log('Generated system prompt length:', systemPrompt.length);
			console.log('Has user data for prompt:', !!(finalProfileData || finalHealthData));
			if (finalProfileData || finalHealthData) {
				console.log('‚úÖ Ki≈üisel bilgilerle prompt olu≈üturuldu');
			} else {
				console.log('‚ùå Genel prompt olu≈üturuldu');
			}
			console.log('System prompt preview:', systemPrompt.substring(0, 500) + '...');
			
			// Llama 3.1 modeli ile yanƒ±t olu≈ütur
			const botReply = await generateChatResponse(userMessage, finalProfileData, finalHealthData);
			
			// Bo≈ü yanƒ±t kontrol√º
			if (!botReply || botReply.trim().length === 0) {
				console.log('Empty response from model');
				return NextResponse.json({ 
					reply: "√úzg√ºn√ºm, ≈üu anda yanƒ±t olu≈üturamƒ±yorum. L√ºtfen daha sonra tekrar deneyin." 
				}, { status: 200 });
			}
			
			console.log('‚úÖ Bot reply generated successfully');
			return NextResponse.json({ reply: botReply }, { status: 200 });
		} catch (apiError) {
			console.log('API Error:', apiError.message);
			return NextResponse.json({ 
				reply: getErrorResponse(apiError.message) 
			}, { status: 200 });
		}

	} catch (error) {
		console.error('Error in API route /api/chat/hf:', error);
		
		return NextResponse.json({ 
			reply: "√úzg√ºn√ºm, bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin." 
		}, { status: 200 });
	}
}