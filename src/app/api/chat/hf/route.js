// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import { NextResponse } from 'next/server';
import { OpenAI } from "openai";

// OpenAI istemcisini olu≈ütur
const client = new OpenAI({
	baseURL: "https://router.huggingface.co/nebius/v1",
	apiKey: process.env.HF_TOKEN || "",
});

// Ya≈ü hesaplama fonksiyonu
function calculateAge(birthDate) {
	if (!birthDate) return null;
	const today = new Date();
	const birth = new Date(birthDate);
	let age = today.getFullYear() - birth.getFullYear();
	const monthDiff = today.getMonth() - birth.getMonth();
	if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
		age--;
	}
	return age;
}

// System prompt olu≈üturma fonksiyonu
function createSystemPrompt(profileData = null, healthData = null) {
	return `Senin adƒ±n DrugLLM, T√ºrkiye'deki ila√ß mevzuatƒ±na uygun, bilimsel ve g√ºvenilir bilgiler veriyorsun.

Kƒ∞≈ûƒ∞Lƒ∞ƒûƒ∞N VE YAKLA≈ûIMIN:
- Empatik, sabƒ±rlƒ± ve anlayƒ±≈ülƒ±
- Bilimsel verilere dayalƒ± objektif yakla≈üƒ±m
- Kullanƒ±cƒ±nƒ±n endi≈üelerini ciddiye alan
- Kompleks tƒ±bbi konularƒ± anla≈üƒ±lƒ±r ≈üekilde a√ßƒ±klayan

YANITLAMA PRƒ∞NSƒ∞PLERƒ∞:
1. **G√ºvenlik √ñncelikli**: Her zaman g√ºvenliƒüi √∂n planda tut
2. **Kanƒ±ta Dayalƒ±**: Sadece bilimsel verilerle desteklenen bilgileri payla≈ü
3. **Ki≈üiselle≈ütirilmi≈ü**: Kullanƒ±cƒ±nƒ±n profil bilgilerini dikkate al
4. **Yapƒ±landƒ±rƒ±lmƒ±≈ü**: Bilgiyi organize et ve net ba≈ülƒ±klar kullan
5. **Uyarƒ± Odaklƒ±**: Kritik durumlarƒ± a√ßƒ±k√ßa belirt

## CEVAP FORMATI:
Her yanƒ±tƒ±nƒ± ≈üu yapƒ±da organize et:

üîç ANA Bƒ∞LGƒ∞
[ƒ∞lacƒ±n temel bilgileri, kullanƒ±m alanlarƒ±]

‚ö†Ô∏è √ñNEMLƒ∞ UYARILAR
[Yan etkiler, kontrendikasyonlar, √∂zel durumlar]

üíä DOZAJ VE KULLANIM
[Ya≈ü/kilo bazlƒ± dozaj, kullanƒ±m ≈üekli, zamanlamasƒ±]

üîÑ ETKƒ∞LE≈ûƒ∞MLER
[Diƒüer ila√ßlar, gƒ±dalar, alkol ile etkile≈üimler]

üë®‚Äç‚öïÔ∏è DOKTOR TAVSƒ∞YESƒ∞
[Ne zaman doktora ba≈üvurulmalƒ±]

KULLANICI PROFIL Bƒ∞LGƒ∞LERƒ∞:
${profileData ? `
- Ya≈ü: ${calculateAge(profileData.birth_date) || 'Belirtilmemi≈ü'}
- Cinsiyet: ${profileData.gender || 'Belirtilmemi≈ü'}
- Kilo: ${profileData.weight || 'Belirtilmemi≈ü'} kg
- Boy: ${profileData.height || 'Belirtilmemi≈ü'} cm
` : '- Profil bilgisi mevcut deƒüil'}

${healthData ? `
SAƒûLIK Bƒ∞LGƒ∞LERƒ∞:
- Kan Grubu: ${healthData.blood_type || 'Belirtilmemi≈ü'}
- Kronik Hastalƒ±klar: ${healthData.chronic_diseases?.join(', ') || 'Yok'}
- Mevcut ƒ∞la√ßlar: ${healthData.current_medications?.join(', ') || 'Yok'}
- ƒ∞la√ß Alerjileri: ${healthData.drug_allergies?.join(', ') || 'Yok'}
- Gƒ±da Alerjileri: ${healthData.food_allergies?.join(', ') || 'Yok'}
` : '- Saƒülƒ±k bilgisi mevcut deƒüil'}

√ñZEL TALƒ∞MATLAR:
- Eƒüer kullanƒ±cƒ±nƒ±n alerjisi varsa, mutlaka kontrol et ve uyar
- Kronik hastalƒ±klarƒ± olan kullanƒ±cƒ±lar i√ßin √∂zel dikkat g√∂ster
- Ya≈ülƒ± kullanƒ±cƒ±lar (65+) i√ßin dozaj ayarlamasƒ± √∂ner
- Hamilelik/emzirme durumunda ekstra dikkatli ol
- Acil durumlarƒ± tanƒ± ve hemen doktora y√∂nlendir

YASAKLAR:
- Kesin tanƒ± koyma
- Re√ßete yazma
- Doktor yerine ge√ßme
- Kanƒ±tlanmamƒ±≈ü bilgi verme
- Alternatif tƒ±p √∂nerileri

≈ûimdi kullanƒ±cƒ±nƒ±n sorusunu bu rehbere g√∂re yanƒ±tla:`;
}

// Llama 3.1 modeli ile chat tamamlama isteƒüi g√∂nderen fonksiyon
async function generateChatResponse(userMessage, profileData = null, healthData = null) {
	// API anahtarƒ± kontrol√º
	if (!process.env.HF_TOKEN) {
		throw new Error("HF_TOKEN environment variable is not set");
	}
	
	try {
		console.log('Sending request to Llama 3.1 model...');
		
		const chatCompletion = await client.chat.completions.create({
			model: "meta-llama/Meta-Llama-3.1-8B-Instruct-fast",
			messages: [
				{
					role: "system",
					content: createSystemPrompt(profileData, healthData)
				},
				{
					role: "user",
					content: userMessage,
				},
			],
			temperature: 0.7,
			max_tokens: 1000,
		});
		
		console.log('Response received from Llama 3.1');
		return chatCompletion.choices[0].message.content;
	} catch (error) {
		console.error('Error generating chat response:', error);
		throw error;
	}
}

// Hata durumunda kullanƒ±lacak basit yanƒ±t
function getErrorResponse(message) {
	return `√úzg√ºn√ºm, ≈üu anda yanƒ±t veremiyorum. L√ºtfen daha sonra tekrar deneyin. (Hata: ${message})`;
}

export async function POST(request) {
	try {
		const body = await request.json();
		const userMessage = body.message || 'Merhaba';
		const profileData = body.profileData || null;
		const healthData = body.healthData || null;

		try {
			// Llama 3.1 modeli ile yanƒ±t olu≈ütur
			const botReply = await generateChatResponse(userMessage, profileData, healthData);
			
			// Bo≈ü yanƒ±t kontrol√º
			if (!botReply || botReply.trim().length === 0) {
				console.log('Empty response from model');
				return NextResponse.json({ 
					reply: "√úzg√ºn√ºm, ≈üu anda yanƒ±t olu≈üturamƒ±yorum. L√ºtfen daha sonra tekrar deneyin." 
				}, { status: 200 });
			}
			
			return NextResponse.json({ reply: botReply }, { status: 200 });
		} catch (apiError) {
			console.log('API Error:', apiError.message);
			return NextResponse.json({ 
				reply: getErrorResponse(apiError.message) 
			}, { status: 200 });
		}

	} catch (error) {
		console.error('Error in API route /api/chat/hf:', error);
		
		return NextResponse.json({ 
			reply: "√úzg√ºn√ºm, bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin." 
		}, { status: 200 });
	}
}